
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    //  Helper Functions
    // =================================
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function userExists() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function getUserRole() {
      return userExists() ? getUserData().data.role : null;
    }

    function isAdmin() {
      return isSignedIn() && getUserRole() == 'Administrador';
    }
    
    function isStaff() {
      let userRole = getUserRole();
      return isSignedIn() && (userRole == 'Administrador' || userRole == 'Mecanico' || userRole == 'Cajero');
    }
    
    function isClient() {
      return isSignedIn() && getUserRole() == 'Cliente';
    }

    // =================================
    //  Collection Rules
    // =================================

    // Settings: Public read, only admin write.
    match /settings/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Users: Admins can manage all, users can manage their own profile.
    match /users/{userId} {
      allow read, update: if isAdmin() || isOwner(userId);
      allow create, delete: if isAdmin();
    }

    // Customers: Staff can read all. Users can read their own.
    // Staff can create. Users can create a customer profile for themselves upon signup.
    match /customers/{userId} {
      allow read: if isStaff() || isOwner(userId);
      allow create: if isStaff() || (isSignedIn() && request.resource.data.email == request.auth.token.email);
      allow update: if isAdmin() || isOwner(userId);
      allow delete: if isAdmin();
    }
    
    // Vehicles: Allow signed in users to read/write for now to fix loading issue.
    match /vehicles/{vehicleId} {
      allow read, write: if isSignedIn(); // TEMPORARY FIX
      allow delete: if isStaff();
    }

    // DVI: Allow signed in users to manage templates and inspections to fix creation issue.
    match /dvi-templates/{templateId} {
      allow read, write: if isSignedIn(); // TEMPORARY FIX
    }
    match /dvi/{dviId} {
      allow read, write: if isSignedIn(); // TEMPORARY FIX
    }

    // Products & Services: Readable by staff. Writable only by Admins,
    // except for stock updates which any staff can do.
    match /products/{productId} {
      allow read: if isStaff();
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || (isStaff() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['stock']));
    }
    
    match /services/{serviceId} {
      allow read: if isStaff();
      allow create, update, delete: if isAdmin();
    }

    // Categories: Readable by staff, writable by Admins.
    match /productCategories/{categoryId} {
      allow read: if isStaff();
      allow create, update, delete: if isAdmin();
    }
    match /serviceCategories/{categoryId} {
      allow read: if isStaff();
      allow create, update, delete: if isAdmin();
    }

    // Stock Logs: Staff can create and read.
    match /stockLogs/{logId} {
      allow create: if isStaff();
      allow read: if isStaff();
    }
    
    // Workshop operations: Staff can manage. Clients can read their own documents.
    match /appointments/{appointmentId} {
      allow read: if isStaff() || (isClient() && resource.data.customerId == request.auth.uid);
      allow write: if isStaff();
    }

    match /appointmentRequests/{requestId} {
      allow create: if isClient() && request.resource.data.customerId == request.auth.uid;
      allow read: if isStaff() || (isClient() && resource.data.customerId == request.auth.uid);
      allow delete: if isStaff();
    }
    
    // Budgets: Admins can manage fully. Clients can manage their own.
    match /budgets/{budgetId} {
      allow read: if isAdmin() || (isClient() && resource.data.customerId == request.auth.uid);
      allow write: if isAdmin();
      allow update: if isAdmin() || (isClient() && request.resource.data.customerId == request.auth.uid);
    }

    match /budgetRequests/{requestId} {
      allow create: if isClient() && request.resource.data.customerId == request.auth.uid;
      allow read, delete: if isAdmin();
    }
    
    match /workOrders/{orderId} {
      allow create, update: if isStaff();
      allow read: if isStaff() || (isClient() && resource.data.customerId == request.auth.uid);
    }
    
    // Admin-Only Areas
    match /cameras/{cameraId} {
      allow read, write: if isAdmin();
    }
    
    match /sales/{saleId} {
      allow read: if isStaff();
      allow write: if isAdmin();
    }
    
    // Cash Register: Can be managed by any staff member.
    match /cashRegisterSessions/{sessionId} {
      allow read, write: if isStaff();
    }
    
    match /cashMovements/{movementId} {
      allow read, write: if isStaff();
    }

    // Receipts: Writable by Admin, readable by staff and the specific client.
    match /receipts/{receiptId} {
      allow create: if isAdmin();
      allow read: if isStaff() || (isClient() && resource.data.customerId == request.auth.uid);
    }
    
    // Server-side logging: Allows write access for logging purposes from backend.
    // Read/manage access is restricted to Admins.
    match /emailLogs/{logId} {
      allow create: if true; // Should be restricted to a service account if possible.
      allow read, update, delete: if isAdmin();
    }

    match /sentEmails/{emailId} {
      allow create: if true; // Should be restricted to a service account if possible.
      allow read, update, delete: if isAdmin();
    }
  }
}
