rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    //  Funciones de Ayuda
    // =================================
    function isSignedIn() {
      return request.auth != null;
    }

    // Devuelve el documento del usuario que hace la petición
    function getRequestingUser() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    // Comprueba si el usuario que hace la petición existe
    function requestingUserExists() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    // Devuelve el rol del usuario que hace la petición
    function getRequestingUserRole() {
      return requestingUserExists() ? getRequestingUser().data.role : null;
    }

    // Comprueba si el usuario es dueño del recurso (documento)
    // Asume que el documento tiene un campo 'customerId' o 'userId'
    function isResourceOwner(resource) {
      return request.auth.uid == resource.data.customerId || request.auth.uid == resource.data.userId;
    }
    
    // Comprueba roles
    function isAdmin() {
      return isSignedIn() && getRequestingUserRole() == 'Administrador';
    }
    
    function isStaff() {
      let userRole = getRequestingUserRole();
      return isSignedIn() && (userRole == 'Administrador' || userRole == 'Mecanico' || userRole == 'Cajero');
    }
    
    function isClient() {
      return isSignedIn() && getRequestingUserRole() == 'Cliente';
    }

    // =================================
    //  Reglas de Colecciones
    // =================================

    // Usuarios: Solo los admins pueden gestionar usuarios. Un usuario puede leer y actualizar su propio perfil.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId || isAdmin();
      allow create, delete: if isAdmin();
    }

    // Clientes: El personal puede gestionar clientes. Un cliente puede ver sus propios datos.
    match /customers/{customerId} {
      allow read: if isStaff() || request.auth.uid == customerId;
      allow create: if isStaff(); // La creación de clientes la hace el personal
      allow update: if isStaff() || request.auth.uid == customerId;
      allow delete: if isAdmin();
    }
    
    // Vehículos: El personal puede gestionar vehículos. Un cliente solo puede ver los suyos.
    match /vehicles/{vehicleId} {
      // La lectura requiere que el 'customerId' en el documento del vehículo coincida con el UID del solicitante, o que el solicitante sea personal.
      allow read: if isStaff() || (resource.data.customerId != null && isResourceOwner(resource));
      // La escritura (crear, actualizar) es solo para el personal.
      allow write: if isStaff();
      allow delete: if isAdmin();
    }

    // DVI (Inspecciones): El personal puede gestionar las inspecciones. El cliente puede leer las suyas.
    match /dvi/{dviId} {
      allow read: if isStaff() || (resource.data.customerId != null && isResourceOwner(resource));
      allow write: if isStaff();
    }

    // Plantillas DVI: Solo los administradores pueden crearlas y modificarlas, pero todo el personal puede leerlas para usarlas.
    match /dvi-templates/{templateId} {
      allow read: if isStaff();
      allow write: if isAdmin();
    }

    // Productos y Servicios: El personal puede leerlos. Solo los Admins gestionan, excepto el stock.
    match /products/{productId} {
      allow read: if isStaff();
      allow create, delete: if isAdmin();
      // Permite a un admin actualizar todo, o al personal actualizar solo el stock.
      allow update: if isAdmin() || (isStaff() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['stock']));
    }
    
    // Presupuestos: El personal puede crear/leer/actualizar. El cliente puede leer los suyos y aprobarlos.
    match /budgets/{budgetId} {
      allow read: if isStaff() || (resource.data.customerId != null && isResourceOwner(resource));
      allow create, update: if isStaff() || 
                              (isClient() && isResourceOwner(resource) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status'])); // El cliente solo puede cambiar el status (aprobar/rechazar)
      allow delete: if isAdmin();
    }
    
    // Órdenes de Trabajo: El personal las gestiona, los clientes pueden leer las suyas.
    match /workOrders/{orderId} {
      allow read: if isStaff() || (resource.data.customerId != null && isResourceOwner(resource));
      allow write: if isStaff();
    }
    
    // --- OTRAS COLECCIONES (simplificado para el ejemplo) ---
    
    // Citas: El personal gestiona, los clientes leen las suyas.
    match /appointments/{appointmentId} {
      allow read: if isStaff() || (resource.data.customerId != null && isResourceOwner(resource));
      allow write: if isStaff();
    }

    // Recibos: El personal de caja/admin escribe. Clientes y personal leen.
    match /receipts/{receiptId} {
      allow read: if isStaff() || (resource.data.customerId != null && isResourceOwner(resource));
      allow create: if getRequestingUserRole() == 'Cajero' || isAdmin();
    }
    
    // Logs del Servidor: Solo se pueden crear desde un backend con privilegios (ver punto 1.2). Lectura solo para Admins.
    match /emailLogs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Nadie puede escribir directamente desde el cliente.
    }
  }
}
